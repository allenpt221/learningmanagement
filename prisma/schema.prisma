generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstname String
  lastname  String
  email     String   @unique
  username  String   @unique
  password  String
  type      DepartmentType @default(CCS)
  image     String @default("https://img.freepik.com/free-vector/blue-circle-with-white-user_78370-4707.jpg")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  posts    Post[]
  likes    Like[]
  comment  Comment[]


  followers Follows[] @relation("following") 
  following Follows[] @relation("follower") 


  notifications Notification[] @relation("userNotifications") 
  notificationsCreated Notification[] @relation("notificationCreator") 
}

enum DepartmentType {
  CCS     @map("College of Computing Studies")
  CEA     @map("College of Engineering And Arts")
  CBS     @map("College of Business Studies")
}

model Post {
  id         String   @id @default(uuid())
  AuthorId   String
  content    String
  image      String?
  department DepartmentType?
  createdAt  DateTime @default(now())

  author  User @relation(fields: [AuthorId], references: [id], onDelete: Cascade)
  likes   Like[]
  comment Comment[]
  notifications Notification[]
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  author User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  

  @@index([userId, postId])
  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  postId    String
  parentId  String?       // <-- nullable parent comment ID for replies
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Self-relation for comment replies
  parent  Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[]  @relation("CommentReplies")
  notifications Notification[]

  @@index([authorId, postId])
  @@index([parentId])
}

model Follows {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId])
  @@id([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}
